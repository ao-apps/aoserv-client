package com.aoindustries.aoserv.client;

/*
 * Copyright 2001-2009 by AO Industries, Inc.,
 * 7262 Bull Pen Cir, Mobile, Alabama, 36695, U.S.A.
 * All rights reserved.
 */
import com.aoindustries.io.CompressedDataInputStream;
import com.aoindustries.io.CompressedDataOutputStream;
import com.aoindustries.io.TerminalWriter;
import com.aoindustries.sql.SQLUtility;
import com.aoindustries.util.StringUtility;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Locale;

/**
 * @author  AO Industries, Inc.
 */
final public class SchemaTable extends GlobalObjectIntegerKey<SchemaTable> {

    static final int COLUMN_NAME=0;

    String name;
    String display;
    private boolean is_public;
    private String description;
    private String since_version;
    private String last_version;

    public SchemaTable() {
    }

    public SchemaTable(
        String name,
        int table_id,
        String display,
        boolean is_public,
        String description,
        String since_version,
        String last_version
    ) {
        this.name=name;
        this.pkey=table_id;
        this.display=display;
        this.is_public=is_public;
        this.description=description;
        this.since_version=since_version;
        this.last_version=last_version;
    }

    public AOServTable<?,? extends AOServObject> getAOServTable(AOServConnector connector) {
        return connector.getTable(pkey);
    }

    public List<AOSHCommand> getAOSHCommands(AOServConnector connector) throws IOException, SQLException {
        return connector.getAoshCommands().getAOSHCommands(this);
    }

    Object getColumnImpl(int i) {
        switch(i) {
            case COLUMN_NAME: return name;
            case 1: return Integer.valueOf(pkey);
            case 2: return display;
            case 3: return is_public?Boolean.TRUE:Boolean.FALSE;
            case 4: return description;
            case 5: return since_version;
            case 6: return last_version;
            default: throw new IllegalArgumentException("Invalid index: "+i);
        }
    }

    public String getSinceVersion() {
        return since_version;
    }

    public String getLastVersion() {
        return last_version;
    }
    
    public String getDescription() {
        return description;
    }

    public String getDisplay() {
        return display;
    }

    public String getName() {
        return name;
    }

    @Override
    String toStringImpl(Locale userLocale) {
        return name;
    }

    public SchemaColumn getSchemaColumn(AOServConnector connector, String name) throws IOException, SQLException {
        return connector.getSchemaColumns().getSchemaColumn(this, name);
    }

    public SchemaColumn getSchemaColumn(AOServConnector connector, int index) throws IOException, SQLException {
        return connector.getSchemaColumns().getSchemaColumn(this, index);
    }

    public List<SchemaColumn> getSchemaColumns(AOServConnector connector) throws IOException, SQLException {
        return connector.getSchemaColumns().getSchemaColumns(this);
    }

    public List<SchemaForeignKey> getSchemaForeignKeys(AOServConnector connector) throws IOException, SQLException {
        return connector.getSchemaForeignKeys().getSchemaForeignKeys(this);
    }

    public TableID getTableID() {
        return TableID.SCHEMA_TABLES;
    }

    public int getTableUniqueID() {
        return pkey;
    }

    public void init(ResultSet result) throws SQLException {
        name=result.getString(1);
        pkey=result.getInt(2);
        display=result.getString(3);
        is_public=result.getBoolean(4);
        description=result.getString(5);
        since_version=result.getString(6);
        last_version=result.getString(7);
    }

    public boolean isPublic() {
        return is_public;
    }

    public void read(CompressedDataInputStream in) throws IOException {
        name=in.readUTF().intern();
        pkey=in.readCompressedInt();
        display=in.readUTF();
        is_public=in.readBoolean();
        description=in.readUTF();
        since_version=in.readUTF().intern();
        last_version=StringUtility.intern(in.readNullUTF());
    }

    public void write(CompressedDataOutputStream out, AOServProtocol.Version version) throws IOException {
        out.writeUTF(name);
        out.writeCompressedInt(pkey);
        out.writeUTF(display);
        out.writeBoolean(is_public);
        out.writeUTF(description);
        if(version.compareTo(AOServProtocol.Version.VERSION_1_30)<=0) out.writeNullUTF(null); // dataverse_editor
        if(version.compareTo(AOServProtocol.Version.VERSION_1_0_A_101)>=0) out.writeUTF(since_version);
        if(version.compareTo(AOServProtocol.Version.VERSION_1_0_A_104)>=0) out.writeNullUTF(last_version);
        if(
            version.compareTo(AOServProtocol.Version.VERSION_1_4)>=0
            && version.compareTo(AOServProtocol.Version.VERSION_1_30)<=0
        ) out.writeNullUTF(null); // default_order_by
    }
}